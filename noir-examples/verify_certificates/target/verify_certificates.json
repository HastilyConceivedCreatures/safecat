{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":6416576759659360288,"abi":{"parameters":[{"name":"person","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"expiration","type":{"kind":"field"},"visibility":"private"},{"name":"bdate","type":{"kind":"field"},"visibility":"private"},{"name":"current_timestamp","type":{"kind":"field"},"visibility":"public"}],"param_witnesses":{"bdate":[{"start":3,"end":4}],"current_timestamp":[{"start":4,"end":5}],"expiration":[{"start":2,"end":3}],"person":[{"start":0,"end":2}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"","file_map":{"19":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n","path":"std/field/bn254.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"32":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\nmod internal;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"},"47":{"source":"mod data_processing;\n\nuse data_processing::bytes_to_fields;\n\n// Check that Person has a type 1 certificate signed by someone\n// two certificates from two signers with two signatures with the same expiration date, saying that at current_timestamp a person born at bdate is human\nfn main(\n    person: pub [Field; 2], \n    // signers: [ [Field; 2]; 2], \n    // signer_merkle_hash_path : [Field; 2],\n    // signature: [ [Field; 3]; 2],\n    expiration: Field, \n    bdate: Field,\n    current_timestamp: pub Field\n) {\n    // verify that the certificates are valid \n    assert(current_timestamp.lt(expiration));\n\n    // turn everything into bytes\n    let person_bytes: [[u8; 64]; 2] = [field_to_bytes(person[0]), field_to_bytes(person[1])];\n    let expiration_bytes: [u8; 10] = field_to_bytes(expiration); \n    let bdate_bytes: [u8; 10] = field_to_bytes(bdate); \n\n    let cert_type : u8 = 49; // 49 = \"1\" in bytes\n\n    let certificate_bytes : [u8; 191] = build_certificate(person_bytes[0], person_bytes[1], cert_type, expiration_bytes, bdate_bytes);\n\n    println(certificate_bytes);\n\n    // let msg_string = \"{'x':21014832726010724769589766708319316991827096659474412078866184895974855912388,'y':06405279515825326203822750770145743232092764236229921922058389951827061816274}\";\n    // let msg_string_as_bytes = msg_string.as_bytes();\n\n    // let msg = \"xy\";\n    // let msg_bytes = msg.as_bytes();\n    // let person_fields = bytes_to_fields(person_x_bytes);\n    // let bytes = [1,2,3];\n    // let (fields, len): ([Field; 1], u32) = bytes_to_fields(person_x_bytes);\n    // let person_y_bytes = to_bytes(person[1]);\n\n    // let person_x_bytes_t = 5;\n\n    // let len_x = person_x_bytes.len();\n    // let len_y = person_y_bytes.len();\n\n    // print(\"field_as_bytes: \");\n    // println(field_as_bytes);\n    // print(\"msg_1: \");\n    // println(msg_as_bytes);\n\n    // print(\"msg_2: \");\n    // println(msg_string_as_bytes);\n    // print(\"person: \");\n    // println(len_y);\n\n    // Transfer the message into an array of Field elements\n    // let fields: [Field; 6] = message_to_fields(cert).0;\n\n    // // Calculate Poseidon Hash\n    // let hash = dep::std::hash::poseidon::bn254::hash_6(fields);\n\n    // let verify_signature = dep::std::eddsa::eddsa_poseidon_verify(signerX, signerY, sigS, sigX, sigY, hash);\n\n\n    // Check the Hash is correct\n    // assert(msg_as_bytes == msg_string_as_bytes);\n}\n\nunconstrained fn field_to_bytes<N>(field: Field) -> [u8; N] {\n    let slice = field.to_be_radix(10, N);\n    let mut bytes: [u8; N] = [0; N];\n    for i in 0..N {\n        bytes[i] = slice[i] + 48;\n    }\n\n    bytes\n}\n\nunconstrained fn build_certificate(\n    person_x_bytes: [u8; 64], \n    person_y_bytes: [u8; 64], \n    cert_type: u8, \n    expiration: [u8; 10], \n    bdate: [u8; 10]\n) -> [u8; 191] {\n    let mut certificate_bytes: [u8; 191] = [0; 191];\n\n    certificate_bytes[0] = selected_strings(1); //{\n    certificate_bytes[1] = selected_strings(4); //\"\n    certificate_bytes[2] = 120; //x\n    certificate_bytes[3] = selected_strings(4); //\"\n    certificate_bytes[4] = selected_strings(5); //:\n    certificate_bytes[5] = selected_strings(4); //\"\n\n    certificate_bytes[70] = selected_strings(4); //\" -> close \"x\"\n    certificate_bytes[71] = selected_strings(3);//,\n    certificate_bytes[72] = selected_strings(4);//\"\n    certificate_bytes[73] = 121; //y\n    certificate_bytes[74] = selected_strings(4);//\"\n    certificate_bytes[75] = selected_strings(5);//:\n    certificate_bytes[76] = selected_strings(4); //\"\n\n    certificate_bytes[141] = selected_strings(4); //\" -> close \"y\"\n    certificate_bytes[142] = selected_strings(3);//,\n    certificate_bytes[143] = selected_strings(4);//\"\n    certificate_bytes[144] = 116; // t\n    certificate_bytes[145] = 121; // y\n    certificate_bytes[146] = 112; // p\n    certificate_bytes[147] = 101; // e\n    certificate_bytes[148] = selected_strings(4);//\"\n    certificate_bytes[149] = selected_strings(5);//:\n    certificate_bytes[150] = cert_type;\n    certificate_bytes[151] = selected_strings(3);//,\n    certificate_bytes[152] = selected_strings(4);//\"\n    certificate_bytes[153] = 116; // e\n    certificate_bytes[154] = 116; // x\n    certificate_bytes[155] = 116; // p\n    certificate_bytes[156] = 116; // d\n    certificate_bytes[157] = 116; // a\n    certificate_bytes[158] = 116; // t\n    certificate_bytes[159] = 116; // e\n    certificate_bytes[160] = selected_strings(4);//\"\n    certificate_bytes[161] = selected_strings(5);//:\n\n    certificate_bytes[172] = selected_strings(3);//,\n    certificate_bytes[173] = selected_strings(4);//\"\n    certificate_bytes[174] = 98;  // b\n    certificate_bytes[175] = 100; // d\n    certificate_bytes[176] = 97;  // a\n    certificate_bytes[177] = 116; // t\n    certificate_bytes[178] = 101; // e\n    certificate_bytes[179] = selected_strings(4);//\"\n    certificate_bytes[180] = selected_strings(5);//:\n\n    certificate_bytes[190] = selected_strings(2); //}\n\n    // fill in 'x' and 'y'\n    for i in 0..64 {\n        certificate_bytes[i+6] = person_x_bytes[i];\n        certificate_bytes[i+78]= person_y_bytes[i];\n    }\n\n    // fill in 'expdate'\n    for i in 0..10 {\n        certificate_bytes[i+162] = expiration[i];\n    }\n\n    // fill in bdate'\n    for i in 0..9 {\n        certificate_bytes[i+162] = expiration[i];\n        certificate_bytes[i+181]= bdate[i];\n    }\n\n    certificate_bytes\n}\n\n// 1 - '{'. 2-'}', 3=',', 4='\"', 5=':'  \nunconstrained fn selected_strings(ch: u8) -> u8 {\n    let mut ascii : u8 = 0;\n\n    if ch == 1 {\n        ascii = 123;\n    }\n\n    if ch == 2 {\n        ascii = 125;\n    }\n\n    if ch == 3 {\n        ascii = 44;\n    }\n\n    if ch == 4 {\n        ascii = 39;\n    }\n\n    if ch == 5 {\n        ascii = 58;\n    }\n\n    // return an error\n    ascii\n}\n","path":"/home/neiman/work/democratic-web/safecat/noir-examples/verify_certifiates/src/main.nr"}}}